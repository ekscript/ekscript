=====================
Export statements
=====================

#!/usr/bin/ekc r

export { hello as default, yo } from "hello";
export * from "yo";
export as namespace yo;

-------------------

(program
    (hash_bang_line)

    (export_statement
        (export_clause
            (export_specifier (identifier) (identifier))
            (export_specifier (identifier))
        )
        (string)
    )

    (export_statement (string))

    (export_statement (identifier))
)

=====================
Import statements
=====================

import type hello from "./"
import hello from "./"
import type hello, { yo as yoyo } from "./thisis"

--------------------

(program

    (import_statement (import_clause (identifier)) (string))

    (import_statement (import_clause (identifier)) (string))

    (import_statement
        (import_clause
            (identifier)
            (named_imports
                (import_specifier (identifier) (identifier))
            )
        )
        (string)
    )

)


=====================
Debugger statement
=====================

debugger;

---------------

(program (debugger_statement))

=====================
Expression Statement - I
=====================

super, super!;
this!;
true, false, null;
namespace ANamespace {}
1.1e30;
`hello ${1}`;
"hello";
'c';
'';
/[\/1-9]/;
import;

---------------

(program
    (expression_statement
        (sequence_expression (super) (non_null_expression (super)))
    )

    (expression_statement (non_null_expression (this)))

    (expression_statement
        (sequence_expression
            (true) (sequence_expression (false) (null))
        )
    )

    (expression_statement (internal_module (identifier) (statement_block)))

    (expression_statement (float_literal))

    (expression_statement (template_string (template_substitution (int_literal))))

    (expression_statement (string))

    (expression_statement (char))

    (expression_statement (char))

    (expression_statement (regex (regex_pattern)))
    
    (expression_statement (import))
)

=========================
Expression Statements - II
=========================

{ hello: 1, yo(a) {}, };
[1, a, hello, ""];
async function func() {}
await hello;
async (a) => { 1; };

----

(program
    (expression_statement
        (object
            (pair (property_identifier) (int_literal))
            (method_definition
                (property_identifier)
                (formal_parameters (required_parameter (identifier)))
                (statement_block)
            )
        )
    )

    (expression_statement
        (array
            (int_literal)
            (identifier)
            (identifier)
            (string)
        )
    )

    (function_declaration
        (identifier)  (formal_parameters) (statement_block)
    )

    (expression_statement (await_expression (identifier)))

    (expression_statement (arrow_function
        (formal_parameters (required_parameter (identifier)))
        (statement_block (expression_statement (int_literal)))
    ))
)

==========================
Expression Statement - III
==========================

async a => async b => { await a;  };
async function* name() {} 

class name {
    get there(){ return 1; };
    hello() {}
}
--------------------------
(program
    (expression_statement
        (arrow_function
            (identifier)
            (arrow_function 
                (identifier)
                (statement_block
                    (expression_statement
                        (await_expression (identifier))
                    )
                )
            )
        )
    )

    (generator_function_declaration
        (identifier)
        (formal_parameters)
        (statement_block)
    )

    (class_declaration
        (type_identifier)
        (class_body
            (method_definition
                (property_identifier)
                (formal_parameters)
                (statement_block (return_statement (int_literal)))
            )
            (method_definition
                (property_identifier)
                (formal_parameters)
                (statement_block)
            )
        )
    )
)

