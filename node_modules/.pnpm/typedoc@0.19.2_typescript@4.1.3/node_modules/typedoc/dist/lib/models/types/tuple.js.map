{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../../src/lib/models/types/tuple.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AASlC,MAAa,SAAU,SAAQ,eAAI;IAgB/B,YAAY,QAAgB;QACxB,KAAK,EAAE,CAAC;QARH,SAAI,GAAG,OAAO,CAAC;QASpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAQD,MAAM,CAAC,IAAe;QAClB,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,eAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAKD,QAAQ;QACJ,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACxC,CAAC;CACJ;AAtDD,8BAsDC;AAED,MAAa,gBAAiB,SAAQ,eAAI;IAGtC,YAAmB,IAAY,EAAS,UAAmB,EAAS,OAAa;QAC7E,KAAK,EAAE,CAAC;QADO,SAAI,GAAJ,IAAI,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAS;QAAS,YAAO,GAAP,OAAO,CAAM;QAFxE,SAAI,GAAG,oBAAoB,CAAC;IAIrC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IAClF,CAAC;IAQD,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,gBAAgB,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpF,CAAC;IAKD,QAAQ;QACJ,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;IACxE,CAAC;CACJ;AAnCD,4CAmCC","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents a tuple type.\n *\n * ~~~\n * let value: [string,boolean];\n * ~~~\n */\nexport class TupleType extends Type {\n    /**\n     * The ordered type elements of the tuple type.\n     */\n    elements: Type[];\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = 'tuple';\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param elements  The ordered type elements of the tuple type.\n     */\n    constructor(elements: Type[]) {\n        super();\n        this.elements = elements;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new TupleType(this.elements);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: TupleType): boolean {\n        if (!(type instanceof TupleType)) {\n            return false;\n        }\n        return Type.isTypeListEqual(type.elements, this.elements);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        const names: string[] = [];\n        this.elements.forEach((element) => {\n            names.push(element.toString());\n        });\n\n        return '[' + names.join(', ') + ']';\n    }\n}\n\nexport class NamedTupleMember extends Type {\n    readonly type = 'named-tuple-member';\n\n    constructor(public name: string, public isOptional: boolean, public element: Type) {\n        super();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new NamedTupleMember(this.name, this.isOptional, this.element.clone());\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: Type): boolean {\n        if (!(type instanceof NamedTupleMember)) {\n            return false;\n        }\n        return this.isOptional === type.isOptional && this.element.equals(type.element);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return `${this.name}${this.isOptional ? '?' : ''}: ${this.element}`;\n    }\n}\n"]}