{"version":3,"file":"parens.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/parens.ts"],"names":[],"mappings":";;;;;;;;;AAAA,iCAAiC;AAGjC,8CAIuB;AAIvB,IAAa,eAAe,GAA5B,MAAa,eACT,SAAQ,mCAAsB;IAE9B,YAAY,CAAC,QAAiB,EAAE,IAAiB;QAC7C,OAAO,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,WAAW,CACP,OAAgB,EAChB,IAA8B;QAE9B,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;CACJ,CAAA;AAbY,eAAe;IAD3B,sBAAS,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;GACtB,eAAe,CAa3B;AAbY,0CAAe","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type } from '../../models/index';\nimport {\n    Component,\n    ConverterTypeComponent,\n    TypeNodeConverter\n} from '../components';\nimport { Context } from '../context';\n\n@Component({ name: 'type:parens' })\nexport class ParensConverter\n    extends ConverterTypeComponent\n    implements TypeNodeConverter<ts.Type, ts.ParenthesizedTypeNode> {\n    supportsNode(_context: Context, node: ts.TypeNode): boolean {\n        return ts.isParenthesizedTypeNode(node);\n    }\n\n    convertNode(\n        context: Context,\n        node: ts.ParenthesizedTypeNode\n    ): Type | undefined {\n        return this.owner.convertType(context, node.type);\n    }\n}\n"]}