{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/types.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAOjC,SAAgB,uBAAuB,CAAC,IAAa;;IACjD,MAAM,YAAY,eAAG,IAAI,CAAC,SAAS,EAAE,0CAAE,eAAe,qCAAM,EAAE,CAAC;IAE/D,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;QACpC,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;YAC7E,WAAW,CAAC,cAAc,EAAE;YAC7B,OAAO,WAAW,CAAC,cAAc,CAAC;SACrC;KACJ;IAED,OAAO,EAAE,CAAC;AACd,CAAC;AAXD,0DAWC;AASD,SAAgB,4BAA4B,CACxC,UAAyC,EACzC,aAA0C;IAE1C,IAAI,CAAC,aAAa,IAAI,UAAU,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE;QAC5D,MAAM,yBAAyB,GAAG,IAAI,KAAK,EAAe,CAAC;QAE3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACxC,IAAI,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;gBACnC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;aACpD;iBAAM;gBACH,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAE1C,IAAI,WAAW,EAAE;oBACb,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC/C;aACJ;SACJ;QAED,OAAO,yBAAyB,CAAC;KACpC;IAED,OAAO,aAAa,CAAC;AACzB,CAAC;AAvBD,oEAuBC","sourcesContent":["import * as ts from 'typescript';\n\n/**\n * Returns the type parameters of a given type.\n * @param type The type whos type parameters are wanted.\n * @returns The type parameters of the type. An empty array if the type has no type parameters.\n */\nexport function getTypeParametersOfType(type: ts.Type): ReadonlyArray<ts.TypeParameterDeclaration> {\n    const declarations = type.getSymbol()?.getDeclarations() ?? [];\n\n    for (const declaration of declarations) {\n        if ((ts.isClassDeclaration(declaration) || ts.isInterfaceDeclaration(declaration)) &&\n             declaration.typeParameters) {\n            return declaration.typeParameters;\n        }\n    }\n\n    return [];\n}\n\n/**\n * Returns a list of type arguments. If a type parameter has no corresponding type argument, the default type\n * for that type parameter is used as the type argument.\n * @param typeParams The type parameters for which the type arguments are wanted.\n * @param typeArguments The type arguments as provided in the declaration.\n * @returns The complete list of type arguments with possible default values if type arguments are missing.\n */\nexport function getTypeArgumentsWithDefaults(\n    typeParams: ts.TypeParameterDeclaration[],\n    typeArguments?: ReadonlyArray<ts.TypeNode>\n): ReadonlyArray<ts.TypeNode> {\n    if (!typeArguments || typeParams.length > typeArguments.length) {\n        const typeArgumentsWithDefaults = new Array<ts.TypeNode>();\n\n        for (let i = 0; i < typeParams.length; ++i) {\n            if (typeArguments && typeArguments[i]) {\n                typeArgumentsWithDefaults.push(typeArguments[i]);\n            } else {\n                const defaultType = typeParams[i].default;\n\n                if (defaultType) {\n                    typeArgumentsWithDefaults.push(defaultType);\n                }\n            }\n        }\n\n        return typeArgumentsWithDefaults;\n    }\n\n    return typeArguments;\n}\n"]}